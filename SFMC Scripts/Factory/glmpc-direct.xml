<?xml version="1.0" encoding="UTF-8"?>

<!--
Date			Author					Comments
Dec 23, 2004	trout.r@comcast.net		Created.
Dec 27, 2004	trout.r@comcast.net		Added glider disconnect
										transitions ("... Carrier Detect lost.").
Dec 30, 2004	trout.r@comcast.net		Commented script.
2006-05-19	rtrout@dinkumsoftware.com	Add states to send a Ctrl-F after sending
										a .ma file to the glider.
2006-08-30	hfargher@DinkumSoftware.com	Updated for Glmpc to send goto_l10.ma
2006-10-27	hfargher@DinkumSoftware.com	Updated to work with direct connection by not relying on loss of
						carrier detect to execute the 'dockzr goto_l10.ma' command.
2009-04-17	hfargher@webbresearch.com	Initially execute "dockzr *" to send any .ma files to glider,
										without having to run mission. Also use "!dockzr *" during mission
										to avoid name-dependence for .ma files.
010-01-20 fnj@webbresearch.com			Added support for Science Data Logging (Release 7.0).
-->

<!--
Purpose: Used during a GLMPC mission to transfer sbd and tbd files to the dockserver, transfer goto_l10.ma
file to the glider, and then re-read the ma file and resume the mission. The goto_l10.ma file is
generated by the glmpc terminal to define a new route to be followed by a glider.
Since a direct connection is assumed, this script is useful when using glmpc terminal to control simulated
gliders.

Dependency: Assumes mission glmpc.mi to be running, and a direct connection to the glider.

Note this script expects this goto_l10.ma file to be in the glider's 'to-glider' folder on the dockserver machine.

For use with dockserver version 1.5 and up.

-->

<gliderScript>
	<!-- The start state of the script.  It attempts to send an initial route.
	-->
	<initialState name="initialDockzr">
		<transitions>
			<transition matchExpression="" toState="sendzModem">
				<action type="glider" command="dockzr *">
				</action>
			</transition>
			<!-- When a surface dialog is seen, send the "s" command and then verify its receipt
			by the glider.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="verifyzModem">
				<action type="glider" command="s *.sbd *.tbd">
				</action>
			</transition>
		</transitions>
	</initialState>



	<!-- Wait for a surface dialog and then send the "s" command.
	-->
	<state name="sendzModem">
		<transitions>
			<!-- When a surface dialog is seen, send the "s" command and then verify its receipt
			by the glider.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="verifyzModem">
				<action type="glider" command="s *.sbd *.tbd">
				</action>
			</transition>
		</transitions>
	</state>



	<!-- This state verifies that the "s" command was received by the glider.
	-->
	<state name="verifyzModem">
		<transitions>
			<!-- If a surface dialog is seen after the "s" command is sent, comsume it by matching
			it and remaining in this state.  Due to timing over Iridium, more than one surface dialog may
			be seen between sending the glider a command and seeing that command's echo.
			While perhaps not absolutely necessary to this script, this transition helps
			keep the script in sync with what's happening on the glider as indicated by its console output.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="verifyzModem">
			</transition>
			<!-- If the "s" command fails to verify - i.e., an echo of the sent command is not seen by the
			dockserver within a specified time (~ 20 sec), then attempt to resend the command.
			-->
			<transition matchExpression="xxx command verify fail xxx" toState="sendzModem">
			</transition>
			<!-- If the sent "s" command is seen, go wait for the zModem transfer to complete.
			-->
			<transition matchExpression="s \*.sbd \*.tbd" toState="waitForTransfer">
			</transition>
			<!-- If the glider connection is dropped, attempt to resend the command when the next surface
			dialog is seen.
			-->
			<transition matchExpression="Connection Event: Carrier Detect lost." toState="sendzModem">
			</transition>
		</transitions>
	</state>



	<!-- This state looks for indications of zModem transfer success or failure.  Note that adding a timeout
	transition out of this state is dangerous since the time required for a zModem transfer is unknown and
	highly variable.
	-->
	<state name="waitForTransfer">
		<transitions>
			<!-- If a surface dialog is seen, assume the "s" command was missed by the glider or that
			the glider connection dropped (possibly cancelling the transfer) and it called back - either on
			the next surfacing or the same surfacing.  Resend the command and attempt to verify it was received.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="verifyzModem">
				<action type="glider" command="s *.sbd *.tbd">
				</action>
			</transition>
			<!-- If science IS going to transfer, handle new type science side transfer first
			-->
			<transition matchExpression="SCIENCE DATA LOGGING: science IS running" toState="waitForNewTypeScienceSideTransfer">
			</transition>
			<!-- If science is NOT going to transfer, skip right to handling new type glider side transfer
			-->
			<transition matchExpression="SCIENCE DATA LOGGING: science is NOT running" toState="waitForNewTypeGliderSideTransfer">
			</transition>
			<!-- If science data logging is not present at all, handle old type glider-only transfer
			-->
			<transition matchExpression="Enumerating and selecting" toState="waitForOldTypeGliderOnlyTransfer">
			</transition>
		</transitions>
	</state>



	<!-- This state looks for indications of zModem transfer success or failure for new type science side transfer.
	Note that adding a timeout transition out of this state is dangerous since the time required for a zModem
	transfer is unknown and highly variable.
	-->
	<state name="waitForNewTypeScienceSideTransfer">
		<transitions>
			<!-- If a surface dialog is seen, assume the "s" command was missed by the glider or that
			the glider connection dropped (possibly cancelling the transfer) and it called back - either on
			the next surfacing or the same surfacing.  Resend the command and attempt to verify it was received.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="verifyzModem">
				<action type="glider" command="s *.sbd *.tbd">
				</action>
			</transition>
			<!-- If the zModem transfer was successful, go send the next command.
			-->
			<transition matchExpression="SCI: SUCCESS" toState="waitForNewTypeGliderSideTransfer">
			</transition>
			<!-- If there were no files to transfer, go send the next command.
			-->
			<transition matchExpression="SCI: NO TRANSMISSION" toState="waitForNewTypeGliderSideTransfer">
			</transition>
			<!-- If the transfer explicitly failed, do not attempt to resend the command (it may fail
			indefinately many times) and go send the next command.
			-->
			<transition matchExpression="SCI: Error sending files" toState="waitForNewTypeGliderSideTransfer">
			</transition>
		</transitions>
	</state>



	<!-- This state looks for indications of zModem transfer success or failure for new type glider side transfer.
	Note that adding a timeout transition out of this state is dangerous since the time required for a zModem
	transfer is unknown and highly variable.
	-->
	<state name="waitForNewTypeGliderSideTransfer">
		<transitions>
			<!-- If a surface dialog is seen, assume the "s" command was missed by the glider or that
			the glider connection dropped (possibly cancelling the transfer) and it called back - either on
			the next surfacing or the same surfacing.  Resend the command and attempt to verify it was received.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="verifyzModem">
				<action type="glider" command="s *.sbd *.tbd">
				</action>
			</transition>
			<!-- If the zModem transfer was successful, go send the next command.
			-->
			<transition matchExpression="GLD: SUCCESS" toState="sendzrma">
			</transition>
			<!-- If there were no files to transfer, go send the next command.
			-->
			<transition matchExpression="GLD: NO TRANSMISSION" toState="sendzrma">
			</transition>
			<!-- If the transfer explicitly failed, do not attempt to resend the command (it may fail
			indefinately many times) and go send the next command.
			-->
			<transition matchExpression="GLD: Error sending files" toState="sendzrma">
			</transition>
		</transitions>
	</state>



	<!-- This state looks for indications of zModem transfer success or failure for old type glider-only transfer.
	Note that adding a timeout transition out of this state is dangerous since the time required for a zModem
	transfer is unknown and highly variable.
	-->
	<state name="waitForOldTypeGliderOnlyTransfer">
		<transitions>
			<!-- If a surface dialog is seen, assume the "s" command was missed by the glider or that
			the glider connection dropped (possibly cancelling the transfer) and it called back - either on
			the next surfacing or the same surfacing.  Resend the command and attempt to verify it was received.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="verifyzModem">
				<action type="glider" command="s *.sbd *.tbd">
				</action>
			</transition>
			<!-- If the zModem transfer was successful, go send the next command.
			-->
			<transition matchExpression="SUCCESS" toState="sendzrma">
			</transition>
			<!-- If there were no files to transfer, go send the next command.
			-->
			<transition matchExpression="NO TRANSMISSION" toState="sendzrma">
			</transition>
			<!-- If the transfer explicitly failed, do not attempt to resend the command (it may fail
			indefinately many times) and go send the next command.
			-->
			<transition matchExpression="Error sending files" toState="sendzrma">
			</transition>
		</transitions>
	</state>



	<!-- This state attempts to send a file to the glider using the "!zr" command.
	-->
	<state name="sendzrma">
		<transitions>
			<!-- If a surface dialog is seen, assume the glider is ready to receive a command and
			send the "!zr" command.  Go verify it was received.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="verifyzrma">
				<action type="glider" command="!dockzr *">
				</action>
			</transition>
			<!-- If no surface dialog is seen for 10 minutes, assume the glider has dove and will
			not reconnect to the dockserver until the next surfacing.  To be ready for that next surfacing,
			go to the initial state of this script.
			-->
			<transition timeout="10" toState="sendzModem">
			</transition>
		</transitions>
	</state>



	<!-- This state verifies that the "!zr" command was received by the glider.
	-->
	<state name="verifyzrma">
		<transitions>
			<!-- If a surface dialog is seen after the "!zr" command is sent, comsume it by matching
			it and remaining in this state.  Due to timing over Iridium, more than one surface dialog may
			be seen between sending the glider a command and seeing that command's echo.
			While perhaps not absolutely necessary to this script, this transition helps
			keep the script in sync with what's happening on the glider as indicated by its console output.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="verifyzrma">
			</transition>
			<!-- If the "!zr" command fails to verify - i.e., an echo of the sent command is not seen by the
			dockserver within a specified time (~ 20 sec), then attempt to resend the command.
			-->
			<transition matchExpression="xxx command verify fail xxx" toState="sendzrma">
			</transition>
			<!-- If the command echo is seen, go wait for the zModem transfer to complete.
			-->
			<transition matchExpression="!zr" toState="waitForzrma">
			</transition>
			<!-- If the file was not found, resume the mission.
			-->
			<transition matchExpression="not found" toState="sendResume">
			</transition>
			<!-- If the glider connection is dropped, attempt to resend the command when the next surface
			dialog is seen.
			-->
			<transition matchExpression="Connection Event: Carrier Detect lost." toState="sendzrma">
			</transition>
		</transitions>
	</state>



	<!-- This state looks for indications of zModem transfer success or failure.  Note that adding a timeout
	transition out of this state is dangerous since the time required for a zModem transfer is unknown and
	highly variable.
	-->
	<state name="waitForzrma">
		<transitions>
			<!-- If a surface dialog is seen, assume the "!zr" command was missed by the glider or that
			the glider connection dropped (possibly cancelling the transfer) and it called back - either on
			the next surfacing or the same surfacing.  Resend the command and attempt to verify it was received.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="verifyzrma">
				<action type="glider" command="!dockzr *">
				</action>
			</transition>
			<!-- If the transfer was successful, go send the reload ma command.
			-->
			<transition matchExpression="Done!" toState="sendReloadma">
			</transition>
			<!-- If the transfer explicitly failed, assume it would repeatedly fail.  So do not resend and
			go send the next command.
			-->
			<transition matchExpression="FAILED: zr" toState="sendResume">
			</transition>
		</transitions>
	</state>



	<!-- This state send a Ctrl-F to cause the glider to reread mafiles.
	-->
	<state name="sendReloadma">
		<transitions>
			<!-- If a surface dialog is seen, assume the glider is ready to receive a command and send
			the Ctrl-F.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="waitForReloadma">
				<action type="glider" command="Ctrl-F">
				</action>
			</transition>
			<!-- If no surface dialog is seen for 10 minutes, assume the glider dove and go to the
			start of the script in preparation for the next surfacing.
			-->
			<transition timeout="10" toState="sendzModem">
			</transition>
		</transitions>
	</state>



	<!-- This state looks for indications of Ctrl-F success or failure.
	-->
	<state name="waitForReloadma">
		<transitions>
			<!-- If the Ctrl-F command failed to verify - i.e., the dockserver did not see an echo of
			the command within ~20 sec of sending it, then attempt to resend it.
			-->
			<transition matchExpression="xxx command verify fail xxx" toState="sendReloadma">
			</transition>
			<!-- Once the Ctrl-F is confirmed, go send a Ctrl-R to resume the mission.
			-->
			<transition matchExpression="MAFILES will be re-read" toState="sendResume">
			</transition>
			<!-- If no indication of success or failure is seen within 10 minutes, assume the glider dove.  Go
			to the script's first state in preparation for the next surfacing.
			-->
			<transition timeout="10" toState="sendzModem">
			</transition>
			<!-- If a surface dialog is seen after sending the Ctrl-F but before an indication of its success, assume
			the command was missed by the glider.  Resend it and wait for success or failure.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="waitForReloadma">
				<action type="glider" command="Ctrl-F">
				</action>
			</transition>
		</transitions>
	</state>



	<!-- This state send a Ctrl-R to cause the glider to resume its mission.
	-->
	<state name="sendResume">
		<transitions>
			<!-- If a surface dialog is seen, assume the glider is ready to receive a command and send
			the Ctrl-R.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="waitForResume">
				<action type="glider" command="Ctrl-R">
				</action>
			</transition>
			<!-- If no surface dialog is seen for 10 minutes, assume the glider dove and go to the
			start of the script in preparation for the next surfacing.
			-->
			<transition timeout="10" toState="sendzModem">
			</transition>
		</transitions>
	</state>



	<!-- This state looks for indications of Ctrl-R success or failure.
	-->
	<state name="waitForResume">
		<transitions>
			<!-- If the Ctrl-R command failed to verify - i.e., the dockserver did not see an echo of
			the command within ~20 sec of sending it, then attempt to resend it.
			-->
			<transition matchExpression="xxx command verify fail xxx" toState="sendResume">
			</transition>
			<!-- Once the Ctrl-R is confirmed, go wait for the glider to disconnect - i.e., Iridium hangup
			-->
			<transition matchExpression="RESUMING MISSION" toState="sendzModem">
			</transition>
			<!-- If no indication of success or failure is seen within 10 minutes, assume the glider dove.  Go
			to the script's first state in preparation for the next surfacing.
			-->
			<transition timeout="10" toState="sendzModem">
			</transition>
			<!-- If a surface dialog is seen after sending the Ctrl-R but before an indication of its success, assume
			the command was missed by the glider.  Resend it and wait for success or failure.
			-->
			<transition matchExpression="Hit Control-R to RESUME" toState="waitForResume">
				<action type="glider" command="Ctrl-R">
				</action>
			</transition>
		</transitions>
	</state>



	<finalState name="final">
	</finalState>
</gliderScript>

